@startuml
'https://plantuml.com/class-diagram

class Login <<(F, green) component>>
{
    +props:Object
    +classes: Theme
    +emailRef: ReactReference
    +passwordRef: ReactReference
    +handleSubmit(event: FormSubmitEvent): void
    +mapDispatchToProps(dispatch: DispatchEvent): void
    +mapStateToProps(state: Object): void
    +render(): ReactNode
}

class ForgotPassword <<(F, green) component>>
{
    +props:Object
    +classes: Theme
    +emailRef: ReactReference
    +message: String
    +handleSubmit((event: FormSubmitEvent): void
    +mapStateToProps(state: Object):void
    +mapDispatchToProps(dispatch: DispatchEvent):void
    +render():ReactNode
}

class Dashboard <<(F, green) component>>
{
    +props:Object
    +classes: Theme
    +title: String
    +open: Boolean
    +setOpen(open: Boolean): void
    +handleDrawerOpen():void
    +handleDrawerClose(): void
    +setTitle(title: String): void
    +mapDispatchToProps(dispatch: DispatchEvent):void
    +render(): ReactNode
}

class AddQuest <<component>>
{
    +state: Object
    +props:Object
    +handleChange(event: FormChangeEvent):void
    +handleCoordinates(event: FormChangeEvent): void
    +addGalleryImageURLs(urls: String[]): void
    +submitQuest(event: FormSubmitEvent): void
    +mapDispatchToProps (dispatch: DispatchEvent):void
    +mapStateToProps (state: Object): void
    +render(): ReactNode
}

class QuestDetails <<(F, green) component>>
{
    +props:Object
    +classes: Theme
    +language: String
    +mapStateToProps(state: Object): void
    +render(): ReactNode
}

class QuestList <<(F, green) component>>
{
   +props:Object
    +classes: Theme
    +searchText: String
    +content: ReactNode
    +handleChange(event: FormChangeEvent): void
    +mapStateToProps (state: Object): void
    +render(): ReactNode
}

class QuestSummary <<(F, green) component>>
{
   +props:Object
    +classes:Theme
    +render():ReactNode
}

class ReduxStore <<(P, yellow) provider>>
{
    +store
}

class MainQuestInputForm <<component>>
{
    +state:Object
    +props:Object
    +constructor(props)
    +render():ReactNode
}

class ChangeQuestDialog <<(F, green) component>>
{
    +props:Object
    +open: Boolean
    +classes: Theme
    +questProperties: Object
    +currentGallery: String[]
    +handleClickOpen(): void
    +handleClose(): void
    +handleChange(event: FormChangeEvent): void
    +handleConfirm() :void
    +removeImageFromGallery(image: String): void
    +handleCoordinates:(event: FormChangeEvent): void
    +mapDispatchToProps(dispatch: DispatchEvent): void
    +mapStateToProps(state: Object): void
    +render():ReactNode
}


class ImageDeleteAlertDialog <<(F, green) component>>
{
    +props:Object
    +open: Boolean
    +classes: Theme
    +handleClickOpen():void
    +handleClose(): void
    +render:ReactNode
}

class QuestDeleteAlertDialog <<(F, green) component>>
{
    +props:Object
    +open:Boolean
    +handleClickOpen(): void
    +handleClose():void
    +handleQuestDelete(): void
    +mapStateToProps(state: Object):void
    +mapDispatchToProps(dispatch: DispatchEvent):void
    +render():ReactNode
}

class UploadDialog <<(F, green) component>>
{
    +props:Object
    +open: Boolean
    +handleClose(): void
    +render():ReactNode
}

class Statistics <<(F, green) component>>
{
   +props:Object
    +classes:Theme
    +value:Integer
    +fixedHeightPaper:Object
    +props:Object
    +mapStateToProps(state: Object):void
    +mapDispatchToProps(dispatch: DispatchEvent):void
    +render():ReactNode
}

class Leaderboard <<(F, green) component>>
{
    +props:Object
    +classes: Theme
    +render():ReactNode
}

class TimeLineChart <<(F, green) component>>
{
    +props:Object
    +classes:Theme
    +data:Object[]
    +filterFinishedGamesByMonth(month:String):void
    +filterStartedGamesByMonth(month:String):void
    +render():ReactNode
}

class VisitedLocationsChart <<(F, green) component>>
{
    +props:Object
    +dataPoints: Object[]
    +options: Object
    +render():ReactNode
}

class AllQuestStatisticsSummary <<(F, green) component>>
{
    +props:Object
    +classes:Theme
    +getAppearancesCount(id:Integer):void
    +getQuestAccomplishmentsCount(id:Integer):void
    +tableContent:ReactNode
    +render():ReactNode
}

class LocationSelectPin <<(F, green) component>>
{
    +props:Object
    +render(): ReactNode
}

class ImageGalleryInput <<component>>
{
    +state: Object
    +props:Object
    +onFileChange(files: File[]): void
    +handleUploadClicked() : void
    +mapDispatchToProps(dispatch: DispatchEvent):void
    +mapStateToProps((state: Object):void
    +render(): ReactNode
}

ReduxStore <..>QuestList
AddQuest *-- MainQuestInputForm
ChangeQuestDialog *-- MainQuestInputForm
ReduxStore <..> Login
ReduxStore <...> ForgotPassword
QuestList *-- "0..*" QuestSummary
QuestDetails *-- ChangeQuestDialog
QuestDetails *-- QuestDeleteAlertDialog
ChangeQuestDialog *-- ImageDeleteAlertDialog
MainQuestInputForm *-- LocationSelectPin
MainQuestInputForm *-- ImageGalleryInput
ImageGalleryInput *-- UploadDialog
Statistics *-- VisitedLocationsChart
Statistics *-- AllQuestStatisticsSummary
Statistics *-- TimeLineChart
Statistics *-- Leaderboard
ReduxStore <..> Dashboard
ReduxStore <..> ImageGalleryInput
ReduxStore <..> ChangeQuestDialog
ReduxStore <..> QuestDeleteAlertDialog
ReduxStore <..>AddQuest
ReduxStore <..>QuestDetails
ReduxStore <....>Statistics
@enduml
